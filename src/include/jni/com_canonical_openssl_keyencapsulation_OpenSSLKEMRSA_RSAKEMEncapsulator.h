/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_canonical_openssl_keyencapsulation_OpenSSLKEMRSA_RSAKEMEncapsulator */

#ifndef _Included_com_canonical_openssl_keyencapsulation_OpenSSLKEMRSA_RSAKEMEncapsulator
#define _Included_com_canonical_openssl_keyencapsulation_OpenSSLKEMRSA_RSAKEMEncapsulator
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     com_canonical_openssl_keyencapsulation_OpenSSLKEMRSA_RSAKEMEncapsulator
 * Method:    cleanupNativeMemory0
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_canonical_openssl_keyencapsulation_OpenSSLKEMRSA_00024RSAKEMEncapsulator_cleanupNativeMemory0
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_canonical_openssl_keyencapsulation_OpenSSLKEMRSA_RSAKEMEncapsulator
 * Method:    encapsulatorInit0
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_com_canonical_openssl_keyencapsulation_OpenSSLKEMRSA_00024RSAKEMEncapsulator_encapsulatorInit0
  (JNIEnv *, jobject, jbyteArray);

/*
 * Class:     com_canonical_openssl_keyencapsulation_OpenSSLKEMRSA_RSAKEMEncapsulator
 * Method:    engineEncapsulate0
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_com_canonical_openssl_keyencapsulation_OpenSSLKEMRSA_00024RSAKEMEncapsulator_engineEncapsulate0
  (JNIEnv *, jobject, jbyteArray, jbyteArray);

/*
 * Class:     com_canonical_openssl_keyencapsulation_OpenSSLKEMRSA_RSAKEMEncapsulator
 * Method:    engineSecretSize0
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_canonical_openssl_keyencapsulation_OpenSSLKEMRSA_00024RSAKEMEncapsulator_engineSecretSize0
  (JNIEnv *, jobject);

/*
 * Class:     com_canonical_openssl_keyencapsulation_OpenSSLKEMRSA_RSAKEMEncapsulator
 * Method:    engineEncapsulationSize0
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_canonical_openssl_keyencapsulation_OpenSSLKEMRSA_00024RSAKEMEncapsulator_engineEncapsulationSize0
  (JNIEnv *, jobject);

#ifdef __cplusplus
}
#endif
#endif
