/*
 * Copyright (C) Canonical, Ltd.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 3.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */
/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_canonical_openssl_cipher_OpenSSLCipher */

#ifndef _Included_com_canonical_openssl_cipher_OpenSSLCipher
#define _Included_com_canonical_openssl_cipher_OpenSSLCipher
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     com_canonical_openssl_cipher_OpenSSLCipher
 * Method:    cleanupNativeMemory0
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_canonical_openssl_cipher_OpenSSLCipher_cleanupNativeMemory0
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_canonical_openssl_cipher_OpenSSLCipher
 * Method:    createContext0
 * Signature: (Ljava/lang/String;Ljava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_com_canonical_openssl_cipher_OpenSSLCipher_createContext0
  (JNIEnv *, jobject, jstring, jstring);

/*
 * Class:     com_canonical_openssl_cipher_OpenSSLCipher
 * Method:    doInit0
 * Signature: ([BII[B[BI)V
 */
JNIEXPORT void JNICALL Java_com_canonical_openssl_cipher_OpenSSLCipher_doInit0
  (JNIEnv *, jobject, jbyteArray, jint, jint, jbyteArray, jbyteArray, jint);

/*
 * Class:     com_canonical_openssl_cipher_OpenSSLCipher
 * Method:    doUpdate0
 * Signature: ([BII)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_canonical_openssl_cipher_OpenSSLCipher_doUpdate0
  (JNIEnv *, jobject, jbyteArray, jint, jint);

/*
 * Class:     com_canonical_openssl_cipher_OpenSSLCipher
 * Method:    doFinal0
 * Signature: ([BI)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_canonical_openssl_cipher_OpenSSLCipher_doFinal0
  (JNIEnv *, jobject, jbyteArray, jint);

#ifdef __cplusplus
}
#endif
#endif
