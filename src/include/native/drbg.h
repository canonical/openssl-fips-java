/*
 * Copyright (C) Canonical, Ltd.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 3.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */
#include <openssl/rand.h>
#include <openssl/evp.h>
#include <openssl/core_names.h>
#include <openssl/params.h>
#include <openssl/provider.h>
#include <string.h>
#include <jssl.h>

#define DEFAULT_STRENGTH 128

typedef struct DRBGParams {
    int prediction_resistance;
    int reseed;
    int strength;
    byte *additional_data;
    int additional_data_length;
    byte *personalization_str;
    int personalization_str_len;
} DRBGParams;

/* Group everything related to an EVP_RAND into this struct */ 
typedef struct _DRBG {
    byte* seed;
    EVP_RAND_CTX* context;
    DRBGParams *params;
    struct _DRBG* parent;
} DRBG;

/* Fetch and initialize a DRBG instance */
DRBG* create_DRBG(const char* name, DRBG* parent);

DRBG* create_DRBG_with_params(const char *name, DRBG *parent, DRBGParams *params);

/* Destroy the given DRBG */
int free_DRBG(DRBG* generator);
int free_DRBGParams(DRBGParams* params);

/* Generate a seed of size n_bytes
 * If a parent EVP_RAND was used, generate a seed (bytes) using it
 * If not, call getentropy() :-(
 */
int generate_seed(DRBG* generator, byte output[], int n_bytes);

/* Reseed the DRBG with a given seed
 * Passing seed = NULL will force reseeding using the
 * underlying entropy source
 */

void reseed(DRBG* generator);

void reseed_with_params(DRBG *generator, DRBGParams *params);

void reseed_with_seed(DRBG* generator, byte seed[], int seed_length);

void reseed_with_seed_and_params(DRBG* generator, byte seed[], int seed_length, DRBGParams *params);

/* Return the next random integer generated by the DRBG.
 * num_bits is the size of the integer in bits
 */
int next_rand_int(DRBG* generator, int num_bits);

/* Return the next requested number of random bytes generated by the DRBG */
int next_rand(DRBG* generator, byte output[], int n_bytes);

int next_rand_with_params(DRBG *generator, byte output[], int n_bytes, DRBGParams *params);
